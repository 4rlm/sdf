======================================
1) RAILS NEW (app_name)
======================================

$ rails new phronetic
$ cd phronetic
======================================


======================================
2) Add Gems
PATH: Gemfile
======================================

# Use hirb for rails c table view.  Then in rails c:
gem 'hirb'
# require 'hirb'
# Hirb.enable

gem 'pry'

---------
$ be bundle install

======================================


======================================
3) APPLICATION CONFIG
PATH: config/application.rb
======================================

config.autoload_paths << File.join(config.root, "lib")
config.autoload_paths += %W(#{config.root}/controllers/concerns)
# config.autoload_paths += %W(#{config.root}/lib/servicers)
config.autoload_paths << Rails.root.join('lib/servicers')
config.autoload_paths += Dir["#{config.root}/lib/servicers"]


======================================
4) CREATE MODULE
PATH: app/controllers/concerns/account_parser.rb
======================================

module AccountParser
  extend ActiveSupport::Concern

  def welcome
    puts "Welcome to the AccountParser!"
  end

end
======================================


======================================
5) CREATE SERVICER CLASS
PATH: lib/servicers/account_saver.rb
======================================

## Call: AccountSaver.new.start_account_saver
## Description: ........

class AccountSaver
  include AccountParser

  def initialize
    puts "\n\n== Welcome to the AccountSaver Class! ==\n\n"
  end

  def start_account_saver
    welcome #=> via AccountParser
    sampler
  end


  def sampler
    puts "In the sampler!"
  end


end
======================================



<><>><><><><> A. SCAFFOLD! <><>><><><><>



======================================
6) SCAFFOLD
======================================

ContNum----(MAIN)
  $ rails g scaffold ContNum status source cont_num
    t.index :cont_num, unique: true

  $ rails g scaffold ContNuming
    t.references :cont_num, index: true
    t.references :cont_numable, polymorphic: true, index: true

ContName----
  $ rails g scaffold ContName status first_name last_name full_name
    t.index :full_name, unique: true

  $ rails g scaffold ContNaming
    t.references :cont_name, index: true
    t.references :cont_namable, polymorphic: true, index: true

    (after 1st end)>>
    add_index :cont_namings, [:cont_name_id, :cont_namable_id], unique: true  #=> And in Model!


ActNum----(MAIN)
  $ rails g scaffold ActNum status source act_num
    t.index :act_num, unique: true

  $ rails g scaffold ActNuming
    t.references :act_num, index: true
    t.references :act_numable, polymorphic: true, index: true

    (after 1st end)>>
    add_index :act_numings, [:act_num_id, :act_numable_id], unique: true  #=> And in Model!

ActName----
  $ rails g scaffold ActName status act_name
    t.index :act_name, unique: true

  $ rails g scaffold ActNaming
    t.references :act_name, index: true
    t.references :act_namable, polymorphic: true, index: true

    (after 1st end)>>
    add_index :act_namings, [:act_name_id, :act_namable_id], unique: true  #=> And in Model!

Address----
  $ rails g scaffold Address status street city state zip full pin
    t.index :full, unique: true

  $ rails g scaffold Addressing
    t.references :address, index: true
    t.references :addressable, polymorphic: true, index: true

    (after 1st end)>>
    add_index :addressings, [:addressing_id, :addressable_type, :addressable_id], unique: true, name: 'addressings_index' #=> And in Model!

Phone----
  $ rails g scaffold Phone status phone
    t.index :phone, unique: true

  $ rails g scaffold Phoning
    t.references :phone, index: true
    t.references :phonable, polymorphic: true, index: true

    (after 1st end)>>
    add_index :phonings, [:phone_id, :phonable_type, :phonable_id], unique: true, name: 'phonings_index' #=> And in Model!  #=> And in Model!

Url----
  $ rails g scaffold Url status url
    t.index :url, unique: true

  $ rails g scaffold Urling
    t.references :url, index: true
    t.references :urlable, polymorphic: true, index: true

    (after 1st end)>>
    add_index :urlings, [:url_id, :urlable_type, :urlable_id], unique: true, name: 'urlings_index' #=> And in Model!  #=> And in Model!

============


$ rake db:migrate

    ========= Future =========
    $ rails g scaffold Bot status
    $ rails g scaffold Geo status
    $ rails g scaffold Who status
======================================


<><>><><><><> B. MODEL CLASSES! <><>><><><><>


======================================
7) MODEL CLASSES
======================================

ContName----

  -ContName
    validates :full_name, uniqueness: true

    has_many :cont_namings
    has_many :cont_nums, through: :cont_namings, source: :cont_namable, source_type: :ContNum

  -ContNaming
    belongs_to :cont_namable, polymorphic: true
    belongs_to :cont_name

    validates :cont_namable_id, uniqueness: true
    validates :cont_name_id, :uniqueness => { scope: :cont_namable_id } #=> ALSO IN MIGRATION!

ContNum----(MAIN)

  -ContNum
    validates :cont_num, uniqueness: true
    has_many :cont_numings

    has_one :cont_naming, as: :cont_namable
    has_one :cont_name, through: :cont_naming

    has_one :addressing, as: :addressable
    has_one :address, through: :addressing

    has_many :phonings, as: :phonable
    has_many :phones, through: :phonings

    has_one :urling, as: :urlable
    has_one :url, through: :urling

    # has_many :act_numings, as: :cont_numable
    # has_many :act_nums, through: :act_numings

  -ContNuming
    belongs_to :cont_numable, polymorphic: true
    belongs_to :cont_num

    validates :cont_numable_id, uniqueness: true
    validates :cont_num_id, :uniqueness => { scope: :cont_numable_id } #=> ALSO IN MIGRATION!

###############################################

ActNum----(MAIN)

  -ActNum
    validates :act_num, uniqueness: true
    has_many :act_numings

    has_one :act_naming, as: :act_namable
    has_one :act_name, through: :act_naming

    has_one :addressing, as: :addressable
    has_one :address, through: :addressing

    has_many :phonings, as: :phonable
    has_many :phones, through: :phonings

    has_one :urling, as: :urlable
    has_one :url, through: :urling

    # has_many :cont_numings, as: :cont_numable
    # has_many :cont_nums, through: :cont_numings

  -ActNuming
    belongs_to :act_numable, polymorphic: true
    belongs_to :act_num

    validates :act_numable_id, uniqueness: true
    validates :act_num_id, :uniqueness => { scope: :act_numable_id } #=> ALSO IN MIGRATION!

ActName----

  -ActName
    validates :act_name, uniqueness: true
    has_many :act_namings
    has_many :act_nums, through: :act_namings, source: :act_namable, source_type: :ActNum

  -ActNaming
    belongs_to :act_namable, polymorphic: true
    belongs_to :act_name

    validates :act_namable_id, uniqueness: true
    validates :act_name_id, :uniqueness => { scope: :act_namable_id } #=> ALSO IN MIGRATION!

Address----

  -Address
    validates :full, uniqueness: true
    has_many :addressings
    has_many :act_nums, through: :addressings, source: :addressable, source_type: :ActNum

  -Addressing
    belongs_to :addressable, polymorphic: true
    belongs_to :address

    validates :address_id, :uniqueness => { :scope => [:addressable_type, :addressable_id] } #=> ALSO IN MIGRATION!

Phone----

  -Phone
    has_many :phonings
    has_many :act_nums, through: :phonings, source: :phonable, source_type: :ActNum

    validates :phone, uniqueness: true

  -Phoning
    belongs_to :phonable, polymorphic: true
    belongs_to :phone

    validates :phone_id, :uniqueness => { :scope => [:phonable_type, :phonable_id] } #=> ALSO IN MIGRATION!

Url----

  -Url
    validates :url, uniqueness: true
    has_many :urlings
    has_many :act_nums, through: :urlings, source: :urlable, source_type: :ActNum

  -Urling
    belongs_to :urlable, polymorphic: true
    belongs_to :url

    validates :url_id, :uniqueness => { :scope => [:urlable_type, :urlable_id] } #=> ALSO IN MIGRATION!

============

========= end ============


<><>><><><><> B. SAMPLE DATA! <><>><><><><>


======================================
4a) Add Account Data (VIA RAILS CONSOLE)
======================================

$ rails c

# require 'hirb'
# Hirb.enable

========== Add Accounts:

act_num_id = 'ac_100'
phone = '200-200-1000'
act_num = ActNum.find_or_create_by(act_num: act_num_id)
act_num.phones << Phone.find_or_create_by(phone: phone)

cont_num_id = 'cont_100'
cont_num = ContNum.find_or_create_by(cont_num: cont_num_id)
cont_num.phones << Phone.find_or_create_by(phone: phone)
#####################

act_num_id = 'ac_100'
act_name = 'Account 900'
phone = '900-900-1000'
url = 'http://www.900.com'
full = '900 Main St, Austin, TX, 10010'

#####################

act_num_id = 'ac_100'
act_name = 'Account 100'
phone = '100-100-1000'
url = 'http://www.100.com'
full = '100 Main St, Austin, TX, 10010'

act_num_id = 'ac_200'
act_name = 'Account 200'
phone = '200-200-2000'
url = 'http://www.200.com'
full = '200 Main St, Austin, TX, 20020'

act_num_id = 'ac_300'
act_name = 'Account 300'
phone = '300-300-3000'
url = 'http://www.300.com'
full = '300 Main St, Austin, TX, 30030'

act_num_id = 'ac_400'
act_name = 'Account 400'
phone = '400-400-4000'
url = 'http://www.400.com'
full = '400 Main St, Austin, TX, 40040'

act_num = ActNum.find_or_create_by(act_num: act_num_id)
act_num.act_name = ActName.find_or_create_by(act_name: act_name)
act_num.phones << Phone.find_or_create_by(phone: phone)
act_num.url = Url.find_or_create_by(url: url)
act_num.address = Address.find_or_create_by(full: full)


########### Testing Creating New Data ###########
http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html

act_num_id = 'ac_100'
act_name = 'Account 100'

act_num = ActNum.find_or_create_by(act_num: act_num_id)
user.profiles.build(name: "Master of Lorem Ipsum").save

act_num.act_name.build(act_name: act_name).save
act_num.act_name.act_name


##############################

user = User.first
user.build_profile(name: "Master of Lorem Ipsum").save
user.profile.name
# => "Master of Lorem Ipsum"

business = Business.first
business.build_profile(name: "Taco Shell").save
business.profile.name
# => "Taco Shell"




########### Eager Loading ###########

act_num_id = 'ac_100'
act_name = 'Account 100'
act_num = ActNum.find_or_create_by(act_num: act_num_id)

Post.includes(:author, { comments: { author: :gravatar } }).each do |post|


##############################

act_num = ActNum.includes(:act_name, :url, :phones, :address).where(act_num: 'ac_100')

puts act_num.act_num
puts act_name.act_name
puts url.url
puts phones.phone.first
puts address.full

#################

act_num = ActNum.includes(:act_numable)

Address.includes(:addressing)

ActName.includes(:act_namings)

Account.includes(:idnums, :phones).where(idnums: {crm_id: 'ac_100'}).where(phones: {phone: '(123) 456-7890'})

======================================



======================================
4b) Add Contact Data (VIA RAILS CONSOLE)
======================================

$ rails c

# require 'hirb'
# Hirb.enable

========== Add Contacts:

########################

cont_num_id = 'cont_100'
full_name = 'Contact Full Name 900'
phone = '900-100-1000'
url = 'http://www.900.com'
full = '900 Main St, Austin, TX, 10010'

########################


cont_num_id = 'cont_100'
full_name = 'Contact Full Name 800'
phone = '800-100-1000'
url = 'http://www.800.com'
full = '800 Main St, Austin, TX, 10010'

cont_num_id = 'cont_200'
full_name = 'Contact Full Name 200'
phone = '200-200-2000'
url = 'http://www.200.com'
full = '200 Main St, Austin, TX, 20020'

cont_num_id = 'cont_300'
full_name = 'Contact Full Name 300'
phone = '300-300-3000'
url = 'http://www.300.com'
full = '300 Main St, Austin, TX, 30030'

cont_num_id = 'cont_400'
full_name = 'Contact Full Name 400'
phone = '400-400-4000'
url = 'http://www.400.com'
full = '400 Main St, Austin, TX, 40040'

cont_num = ContNum.find_or_create_by(cont_num: cont_num_id)
cont_num.cont_name = ContName.find_or_create_by(full_name: full_name)
cont_num.phones << Phone.find_or_create_by(phone: phone)
cont_num.url = Url.find_or_create_by(url: url)
cont_num.address = Address.find_or_create_by(full: full)
======================================


======================================
5) View Data
======================================
ContNum.all
ContName.all
ContNaming.all


ActNum.all
ActName.all
ActNaming.all

Address.all
Addressing.all

Phone.all
Phoning.all

Url.all
Urling.all
###############
act_num = ActNum.find_or_create_by(act_num: act_num_id)
act_num.act_name
act_num.phones
act_num.url
act_num.address

act_num.act_name.act_name
act_num.phones.first.phone
act_num.url.url
act_num.address.full
======================================



======================================
9) (Old - Reference) SERVICER CLASS
PATH: lib/servicers/account_saver.rb
======================================


## Call: AccountSaver.new.start_account_saver
## Description: ........

class AccountSaver
  # include AccountParser

  def initialize
    puts "\n\n== Welcome to the AccountSaver Class! ==\n\n"
  end


  def start_account_saver
    # welcome
    # query_account_hashes
    sampler
  end


  #######################################

  def sampler
    puts "In the sampler!"

    act_num_id = 'ac_100'
    act_num_id = 'ac_200'
    act_num_id = 'ac_300'
    act_num_id = 'ac_400'
    act_num_id = 'ac_500'

    act_name = 'Account 100'
    act_name = 'Account 200'
    act_name = 'Account 300'
    act_name = 'Account 400'
    act_name = 'Account 500'

    phone = '888-888-8888'
    phone = '777-777-7777'
    phone = '555-555-5555'
    phone = '444-444-4444'
    phone = '333-333-3333'

    act_num = ActNum.find_or_create_by(act_num: act_num_id)
    act_num.act_name = ActName.find_or_create_by(act_name: act_name)
    # act_num.act_names << ActName.find_or_create_by(act_name: act_name)
    act_num.phones << Phone.find_or_create_by(phone: phone)

  end

  #######################################


  def query_account_hashes
    puts "Querying Account Hash, then Saving to DB..."
    # raw_account_hashes = []
    # account_hash = {crm_id: 'HERE', crm_id_category: 'HERE', crm_id_source: 'HERE', account_status: 'HERE', account_source: 'HERE', url: 'HERE', url_status: 'HERE', org_name: 'HERE', street: 'HERE', city: 'HERE', zip: 'HERE', state: 'HERE', full_address: 'HERE', address_pin: 'HERE', phone: 'HERE'}

    account_hash = {crm_id: 'ac_100', crm_id_category: 'account', crm_id_source: 'crm', account_status: 'imported', account_source: 'crm', url: 'http://www.sample123.com', url_status: 'valid', org_name: 'Happy Cars 123', street: '123 Main St.', city: 'Happytown', state: 'AZ', zip: '12345', full_address: '123 Main St., Happytown, AZ, 12345', address_pin: 's123-z12345', phone: '(123) 456-7890'}

    parse_account_hash(account_hash)
  end

  def parse_account_hash(account_hash)
    puts "Parsing Account Hash, then Saving to DB..."

    @crm_data = nil
    @account_data = nil
    @url_data = nil
    @org_data = nil
    @address_data = nil
    @phone_data = nil

    @crm_data = { crm_id: account_hash[:crm_id], category: account_hash[:crm_id_category], source: account_hash[:crm_id_source] }
    @account_data = { status: account_hash[:account_status], source: account_hash[:account_source] }
    @url_data = { url: account_hash[:url], status: account_hash[:url_status] }
    @org_data = { name: account_hash[:org_name] }
    @address_data = { street: account_hash[:street], city: account_hash[:city], zip: account_hash[:zip], state: account_hash[:state], full_address: account_hash[:full_address], address_pin: account_hash[:address_pin] }
    @phone_data = { phone: account_hash[:phone] }

    save_or_update_db
  end

  def save_or_update_db
    # Account.where(whatever: "condition").includes(:idnums)
    # Account.all.includes(:idnums).map(&:idnums)
    # Account.includes(:idnums).map(&:idnums)
    # Account.includes(:idnums).where(idnums: {crm_id: 'ac_100'})
    # Account.includes(:idnums, :phones).where(idnums: {crm_id: 'ac_100'}).where(phones: {phone: '(123) 456-7890'})
    # crm_id_status = Crm.find_by(crm_id: @crm_data[:crm_id]).present?

    # Account.includes(:idnums).where(idnums: {crm_id: 'ac_100'})
    # Crm.find_by(crm_id: 'ac_100')
    #
    # Account.includes(:idnums).where(idnums: {crm_id: 'ac_100'})
    #
    # User.create_with(last_name: 'Johansson').find_or_create_by(first_name: 'Scarlett')
    #
    # Crm.find_by(crm_id: 'ac_100')
    #
    # , account_status: 'imported', account_source: 'crm'
    #
    # Account.find_or_create_by(status: 'imported', source: 'crm')
    #
    # .includes(:idnums).find_or_create_by(idnums: {crm_id: 'ac_100', crm_id_category: 'account', crm_id_source: 'crm'})





    # # crm_id_status = Crm.find_by(crm_id: 'ac_100').present?
    # crm_id_status = Crm.find_by(crm_id: @crm_data[:crm_id]).present?
    #
    # if crm_id_status == false
    #   puts "Account CRM ID: Unique - Saving to DB!"
    #   account = Account.create(@account_data)
    #   account.idnums << Crm.create(@crm_data)
    #
    #   account.orgs << Org.find_or_create_by(@org_data)
    #   account.urls << Url.find_or_create_by(@url_data)
    #   account.phones << Phone.find_or_create_by(@phone_data)
    #   account.addresses << Address.find_or_create_by(@address_data)
    # else
    #   puts "Account CRM ID: Duplicate - Rollback"
    # end


    # crm_id_status = Crm.find_by(crm_id: 'ac_100').present?
    crm_id_status = Crm.find_by(crm_id: @crm_data[:crm_id]).present?

    if crm_id_status == false
      puts "Account CRM ID: Unique - Saving to DB!"
      account = Account.create(@account_data)
      account.idnums << Crm.create(@crm_data)

      account.orgs << Org.find_or_create_by(@org_data)
      account.urls << Url.find_or_create_by(@url_data)
      account.phones << Phone.find_or_create_by(@phone_data)
      account.addresses << Address.find_or_create_by(@address_data)
    else
      puts "Account CRM ID: Duplicate - Rollback"
    end

  end


end
